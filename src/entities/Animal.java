package entities;

import entities.creature.animal.herbivore.Herbivore;
import entities.creature.animal.predator.Predator;
import entities.creature.animal.–æmnivore.Omnivore;
import entities.creature.plant.Plant;
import entities.—Åonfig.AnimalFactory;


import java.util.*;
import java.util.concurrent.ThreadLocalRandom;

public abstract class Animal {
    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ–µ–¥–∞–Ω–∏—è
    protected static final Map<Class<? extends Animal>, Map<Class<? extends Animal>, Double>> eatingProbabilities = new HashMap<>();

    // –ê—Ç—Ä–∏–±—É—Ç—ã –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
    public final double weight;
    public final int maxOnCell;
    public final int speed;
    public double foodNeed;
    public final String emoji;
    public boolean isAlive = true; // –ñ–∏–≤ –ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–º

    public Cell currentCell; // –¢–µ–∫—É—â–∞—è –∫–ª–µ—Ç–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∂–∏–≤–æ—Ç–Ω–æ–µ

    public final List<String> actions; // –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π –∂–∏–≤–æ—Ç–Ω–æ–≥–æ

    public Animal(double weight, int maxOnCell, int speed, double foodNeed, String emoji) {
        this.weight = weight;
        this.maxOnCell = maxOnCell;
        this.speed = speed;
        this.foodNeed = foodNeed;
        this.emoji = emoji;
        this.actions = new java.util.ArrayList<>();
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã
    public double getWeight() {
        return weight;
    }

    public int getMaxOnCell() {
        return maxOnCell;
    }

    public int getSpeed() {
        return speed;
    }

    public double getFoodNeed() {
        return foodNeed;
    }

    public String getEmoji() {
        return emoji;
    }

    public Cell getCurrentCell() {
        return currentCell;
    }

    public void setCurrentCell(Cell currentCell) {
        this.currentCell = currentCell;
    }

    public boolean isAlive() {
        return isAlive;
    }

    public List<String> getActions() {
        return actions;
    }

    public void clearActions() {
        actions.clear();
    }

    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è
    public void eat() {
        if (!isAlive || currentCell == null) return;

        // 1. –ü–æ–µ–¥–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö (–¥–ª—è —Ö–∏—â–Ω–∏–∫–æ–≤ –∏ –≤—Å–µ—è–¥–Ω—ã—Ö)
        if (this instanceof Predator || this instanceof Omnivore) {
            List<Animal> potentialPrey = new ArrayList<>(currentCell.getAnimals());
            for (Animal target : potentialPrey) {
                if (!target.isAlive() || target == this) continue;

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–µ–¥–∞–Ω–∏—è
                double chance = Animal.getEatingProbability(this.getClass(), target.getClass());
                if (ThreadLocalRandom.current().nextDouble() < chance) {
                    currentCell.removeAnimal(target);      // –£–¥–∞–ª—è–µ–º –∂–µ—Ä—Ç–≤—É –∏–∑ –∫–ª–µ—Ç–∫–∏
                    consumeFood(target.getWeight());      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—ã—Ç–æ—Å—Ç—å
                    target.die();                         // –£–±–∏–≤–∞–µ–º –∂–µ—Ä—Ç–≤—É
                    System.out.println(getEmoji() + " —Å—ä–µ–ª " + target.getEmoji() +
                            " –≤ –∫–ª–µ—Ç–∫–µ [" + currentCell.getRow() + "][" + currentCell.getCol() + "]");
                    return; // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–µ–¥–∞–Ω–∏—è –≤—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ—Ç–æ–¥–∞
                }
            }
        }

        // 2. –ü–æ–µ–¥–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–π (–¥–ª—è —Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö –∏ –≤—Å–µ—è–¥–Ω—ã—Ö)
        if (this instanceof Herbivore || this instanceof Omnivore) {
            List<Plant> plants = new ArrayList<>(currentCell.getPlants());
            if (!plants.isEmpty()) {
                Plant plant = plants.get(0); // –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ
                double foodEaten = Math.min(plant.getWeight(), foodNeed); // –°–∫–æ–ª—å–∫–æ –∂–∏–≤–æ—Ç–Ω–æ–µ –º–æ–∂–µ—Ç —Å—ä–µ—Å—Ç—å
                plant.reduceWeight(foodEaten);  // –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Å —Ä–∞—Å—Ç–µ–Ω–∏—è
                consumeFood(foodEaten);         // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—ã—Ç–æ—Å—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–≥–æ

                if (plant.getWeight() <= 0) {
                    currentCell.removePlant(plant); // –£–¥–∞–ª—è–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—ä–µ–¥–µ–Ω–æ
                }

                System.out.println(getEmoji() + " —Å—ä–µ–ª üå±\uD83E\uDD66 –Ω–∞ " + foodEaten + " –∫–≥ –≤ –∫–ª–µ—Ç–∫–µ [" +
                        currentCell.getRow() + "][" + currentCell.getCol() + "]");
            }
        }
    }

    public void reproduce() {
        if (!isAlive || currentCell == null) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Å–æ–±–∏ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
        long sameTypeCount = currentCell.countAnimalsOfType(this.getClass());
        if (sameTypeCount < 2) return; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å–æ–±–µ–π –¥–ª—è —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
        if (sameTypeCount >= 2 && currentCell.countAnimals() < currentCell.getMaxAnimals()) {
            Animal newAnimal = AnimalFactory.createAnimal(getClass().getSimpleName());
            currentCell.addAnimal(newAnimal);
            newAnimal.setCurrentCell(currentCell);

            System.out.println(getEmoji() + " —Ä–∞–∑–º–Ω–æ–∂–∏–ª—Å—è –≤ –∫–ª–µ—Ç–∫–µ [" +
                    currentCell.getRow() + "][" + currentCell.getCol() + "]");
        }}

    public boolean move() {
        if (!isAlive || currentCell == null || speed == 0) return false;

        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–ª–µ—Ç–∫—É
        int originalRow = currentCell.getRow();
        int originalCol = currentCell.getCol();

        for (int attempt = 0; attempt < 10; attempt++) { // –ú–∞–∫—Å–∏–º—É–º 10 –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            int deltaRow = ThreadLocalRandom.current().nextInt(-speed, speed + 1);
            int deltaCol = ThreadLocalRandom.current().nextInt(-speed, speed + 1);

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –æ—Å—Ç–∞—Ç—å—Å—è –Ω–∞ –º–µ—Å—Ç–µ
            if (deltaRow == 0 && deltaCol == 0) continue;

            int newRow = originalRow + deltaRow;
            int newCol = originalCol + deltaCol;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –Ω–æ–≤–∞—è –∫–ª–µ—Ç–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥—Ä–∞–Ω–∏—Ü
            if (!currentCell.getIsland().isWithinBounds(newRow, newCol)) continue;

            Cell newCell = currentCell.getIsland().getCell(newRow, newCol);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è –∫–ª–µ—Ç–∫–∞ –º–æ–∂–µ—Ç –≤–º–µ—Å—Ç–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ
            if (newCell != null && newCell.canAddAnimal(this)) {
                // –£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
                currentCell.removeAnimal(this); // –£–±–∏—Ä–∞–µ–º –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–ª–µ—Ç–∫–∏
                newCell.addAnimal(this);       // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—É—é –∫–ª–µ—Ç–∫—É
                this.setCurrentCell(newCell);  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–µ—Ç–∫—É

                System.out.println(getEmoji() + " –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –∏–∑ –∫–ª–µ—Ç–∫–∏ [" +
                        originalRow + "][" + originalCol + "] –Ω–∞ –∫–ª–µ—Ç–∫—É [" +
                        newRow + "][" + newCol + "]");
                return true;
            }
        }

        // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–µ
        System.out.println(getEmoji() + " –æ—Å—Ç–∞–ª—Å—è –≤ –∫–ª–µ—Ç–∫–µ [" +
                originalRow + "][" + originalCol + "] –∏ –Ω–µ —Å–º–æ–≥ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è.");
        return false; // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å
    }

    public void die() {
        isAlive = false;
        actions.add("–£–º–µ—Ä");
    }

    public static void addEatingProbabilities(Class<? extends Animal> predator, Map<Class<? extends Animal>, Double> probabilities) {
        eatingProbabilities.put(predator, probabilities);
    }

    public static double getEatingProbability(Class<? extends Animal> predator, Class<? extends Animal> prey) {
        return eatingProbabilities.getOrDefault(predator, Map.of()).getOrDefault(prey, 0.0);
    }
    public void consumeFood(double foodEaten) {
        foodNeed -= foodEaten;
        if (foodNeed <= 0) {
            foodNeed = 0;
        }
    }
    public void performActions() {
        if (!isAlive || currentCell == null) return;

        boolean moved = move(); // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è

        if (moved) {
            eat();       // –ü–∏—Ç–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            reproduce(); // –†–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        } else {
            System.out.println(getEmoji() + " –æ—Å—Ç–∞–ª—Å—è –≤ –∫–ª–µ—Ç–∫–µ [" +
                    currentCell.getRow() + "][" + currentCell.getCol() + "] –∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –¥–µ–π—Å—Ç–≤–∏—è.");
        }
    }

    public abstract Animal createNewInstance();
}