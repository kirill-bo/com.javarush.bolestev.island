package entities;

import entities.creature.plant.Plant;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

public class Cell {
    private final int row;
    private final int col;
    private final Island island;
    private final List<Animal> animals = new CopyOnWriteArrayList<>();
    private final List<Plant> plants = new CopyOnWriteArrayList<>();

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    public Cell(int row, int col, Island island) {
        this.row = row;
        this.col = col;
        this.island = island;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∫–ª–µ—Ç–∫–∏
    public int getRow() {
        return row;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∫–ª–µ—Ç–∫–∏
    public int getCol() {
        return col;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç—Ä–æ–≤–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–ª–µ—Ç–∫–∞
    public Island getIsland() {
        return island;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –≤ –∫–ª–µ—Ç–∫—É
    public synchronized void addAnimal(Animal animal) {
        animals.add(animal);
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏–∑ –∫–ª–µ—Ç–∫–∏
    public synchronized void removeAnimal(Animal animal) {
        animals.remove(animal);
    }
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ –∫–ª–µ—Ç–∫—É
    public void addPlant(Plant plant) {
        plants.add(plant);
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–∑ –∫–ª–µ—Ç–∫–∏
    public void removePlant(Plant plant) {
        plants.remove(plant);
    }

    public synchronized List<Animal> getAnimals() {
        return new ArrayList<>(animals); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    }

    public synchronized List<Plant> getPlants() {
        return new ArrayList<>(plants); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º—ë—Ä—Ç–≤—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ –∫–ª–µ—Ç–∫–∏
    public void removeDeadAnimals() {
        animals.removeIf(animal -> !animal.isAlive());
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ –∫–ª–µ—Ç–∫—É
    public boolean canAddAnimal(Animal animal) {
        long count = countAnimalsOfType(animal.getClass());
        return count < animal.getMaxOnCell();
    }

    // –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    public long countAnimalsOfType(Class<? extends Animal> type) {
        return animals.stream()
                .filter(type::isInstance) // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª–∞—Å—Å–∞
                .count();
    }

    // –ü–æ–¥—Å—á—ë—Ç –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –∫–ª–µ—Ç–∫–µ
    public int countAnimals() {
        return animals.size();
    }

    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –∫–ª–µ—Ç–∫–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–¥–∞–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º)
    public int getMaxAnimals() {
        return 100; // –ü—Ä–∏–º–µ—Ä —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();

        // –î–æ–±–∞–≤–ª—è–µ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö
        if (!animals.isEmpty()) {
            animals.forEach(animal -> builder.append(animal.getEmoji()).append(" "));
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç–µ–Ω–∏—è
        if (!plants.isEmpty()) {
            builder.append("üå±").append(plants.size()).append(" ");
        }

        return builder.toString();
    }

    public void growPlants(double growthRate, double maxPlantWeight) {
        for (Plant plant : plants) {
            plant.addWeight(growthRate);
            if (plant.getWeight() > maxPlantWeight) {
                plant.setWeight(maxPlantWeight);
            }
        }
    }
}
